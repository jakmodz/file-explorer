import { CheckBox,VerticalBox,LineEdit,ListView, Button, ComboBox, StandardListView, Switch} from "std-widgets.slint";

export component AppWindow inherits Window 
{
     public function setModel(x:[StandardListViewItem])
    {
        list_data = x; 
    }
    public function checkIsBothTrue(x:bool,z:bool) -> bool
    {
            if (x== true && z ==true)
            {
                root.getFiles();
                true;
            }
            else 
            {
                false
            }
    }
    public function checkIsBothFalse(x:bool,z:bool) -> bool
    {
            if (x== false && z ==false)
            {
                root.getFiles();
                true;
            }
            else 
            {
                false
            }
    }
    public function reverse(x: bool) -> bool {
        return !x;
    }
     callback getFiles() ->[StandardListViewItem];
     callback getItemsByName(string)->[StandardListViewItem];
     callback onlyFiles()->[StandardListViewItem];
     callback onlyCatalogs()->[StandardListViewItem];
     callback moveForward(StandardListViewItem, bool , bool)->[StandardListViewItem];
     callback moveBack(bool, bool)->[StandardListViewItem];
     callback openFile(StandardListViewItem);
     callback deleteFile(StandardListViewItem);
     callback addFile(string, bool);
     property <[StandardListViewItem]> list_data;
     property <bool> box1:false;
     property <bool> box2:false;
     max-width: 950px;
     min-width: 830px;
     preferred-height: 400px;
    addPopup :=  PopupWindow
    {
        close-on-click: false;
        Rectangle 
        {
            
            VerticalLayout 
            {
                    padding-top: 20px;
                alignment: start;
                fileName := LineEdit 
                {
                    accepted => 
                    {
                        root.addFile(fileName.text,fileOrDir.checked);
                        if (checkIsBothTrue(box1,box2))
                        {
                            setModel( root.getFiles() )
                        }
                        else if(box1 == true)
                        {
                            setModel(  root.onlyFiles());
                        }
                        else if (box1 == false && box2 == false)
                        {
                            setModel(root.getFiles())
                        }
                        else {
                            setModel(  root.onlyCatalogs());
                        }
                       // setModel(root.getItemsByName(fileName.text));
                        addPopup.close();
                    }
                    placeholder-text: "file name";
                }
            }
            VerticalLayout 
            {
                 padding-top: 65px;
                alignment: start;
              
               fileOrDir := Switch 
                {
                    text: "file";
                }
            }
            VerticalLayout 
            {
                padding-top: 100px;
                alignment: start;
                Button 
                {
                    clicked => 
                    {
                        
                        addPopup.close();
                    }
                    text: "back";
                }
            }
            
        }
        x: root.width / 2 - 170px;
        y: root.height / 5 ;
        height: 200px;
        width: 300px;
    }
     deleteFilePopup := PopupWindow {
        Rectangle { 
            
            border-radius: 5px;
            
            VerticalLayout {
                alignment: end;
                height: 100%;  // Ensure the layout takes the full height of the rectangle
                padding: 10px;  // Add some padding for better spacing
    
                Text {
                    height: 50%;
                    text: "Are you sure you want to delete the file/dir?";
                    horizontal-alignment: center;  // Center the text horizontally
                    vertical-alignment: center; 
                    font-size: 18px;   // Center the text vertically
                }
                
                VerticalLayout {
                    height: 50%;  // Ensure this layout takes up the remaining height
                    spacing: 10px; // Add some spacing between buttons
                    alignment: center;  // Center the buttons horizontally
                    
                    Button {
                        text: "Yes";
                        clicked => 
                        {
                            root.deleteFile(list_data[listView.current-item]);
                           
                            if (checkIsBothTrue(box1,box2))
                            {
                                setModel( root.getFiles() )
                            }
                            else if(box1 == true)
                            {
                                setModel(  root.onlyFiles());
                            }
                            else if (box1 == false && box2 == false)
                            {
                                setModel(root.getFiles())
                            }
                            else {
                                setModel(  root.onlyCatalogs());
                            }
                        }
                    }
                    Button {
                        text: "No";
                        clicked => 
                        {
                           deleteFilePopup.close();
                        }
                    }
                }
            }
        }
        x: root.width / 2 - 150px;
        y: root.height / 5 - 50px;
        height: 200px;
        width: 300px;
    }
    VerticalLayout
    {
        
        HorizontalLayout 
        {
            spacing: 7px;
            Button 
             {
               clicked => 
               {
                
                setModel( root.moveBack(box1,box2));
               }
              
             }
            Button 
             {
                clicked => 
                {
                   
                   if(listView.current-item > -1)
                   {
                    setModel(root.moveForward(list_data[listView.current-item],box1,box2));
                   }
                }
             }
             
        }
        HorizontalLayout
        {
            alignment: end;
            HorizontalLayout 
            {
                alignment: start;
                VerticalLayout 
                {         
                        alignment: start;
                        LineEdit 
                        {
                            placeholder-text: "search in current";
                            accepted => 
                            {
                                //setModel(root.getItemsByName(fileName.text));
                            }
                        }
                        HorizontalLayout 
                        {
                            alignment: center;
                            VerticalLayout 
                            {
                                spacing: 6px;
                                padding-left: 10px;
                                CheckBox 
                                {
                                    text: "file";
                                  
                                    toggled => 
                                    {
                                       
                                       box1 =  reverse(box1);
                                        if (checkIsBothTrue(box1,box2))
                                        {
                                            setModel( root.getFiles() )
                                        }
                                        else if(box1 == true)
                                        {
                                            setModel(  root.onlyFiles());
                                        }
                                        else if (box1 == false && box2 == false)
                                        {
                                            setModel(root.getFiles())
                                        }
                                        else {
                                            setModel(  root.onlyCatalogs());
                                        }
                                        
                                    }
                                }
                                CheckBox 
                                {
                                    text: "folder";
                                    
                                    toggled => 
                                    {
                                       box2 = reverse(box2);
                                       if (checkIsBothTrue(box1,box2))
                                       {
                                        setModel(root.getFiles())
                                       }
                                       else if (box2 ==true )
                                        {
                                            setModel( root.onlyCatalogs() )
                                        }
                                        else if (box1 == false && box2 == false)
                                        {
                                            setModel(root.getFiles())
                                        }
                                        else 
                                        {
                                            setModel( root.onlyFiles());
                                        }

                                    }
                                }
                                LineEdit 
                                {
                                   width: 10%;
                                   placeholder-text: "extension";
                                   enabled: box1;
                                }
                                Button 
                                {
                                    text: "open file";
                                    clicked => 
                                    {
                                            root.openFile(list_data[listView.current-item])
                                    }
                                }
                                Button 
                                {
                                    text: "delte";
                                    clicked => 
                                    {
                                        deleteFilePopup.show();
                                    }
                                }
                                Button 
                                {
                                    text: "add";
                                    clicked => 
                                    {
                                      addPopup.show();
                                    }
                                }
                            }  
                        } 
                }
            }
        } 
    }
    HorizontalLayout 
    {
        alignment: start;
        VerticalLayout 
        { 
            width: 80%;
            alignment: end;
            listView:=   StandardListView 
            {
                height: 91%;
                model: list_data;
  
            }
        }
    }
} 